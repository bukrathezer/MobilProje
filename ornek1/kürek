import React, { useEffect, useState } from 'react';
import { View, Text, FlatList, Button, StyleSheet, Modal, ScrollView, TextInput } from 'react-native';
import { FIRESTORE_DB } from '../../FirebaseConfig';
import { collection, getDocs, query, where } from 'firebase/firestore';

interface Tests {
    IgA: number | null;
    IgM: number | null;
    IgG: number | null;
    IgG1: number | null;
    IgG2: number | null;
    IgG3: number | null;
    IgG4: number | null;
    timestamp: any;
}

interface Guide {
    testType: string;
    ranges: { ageGroup: string; min: number | null; max: number | null; ageMin: number | null; ageMax: number }[];
    guideCollection: string;
}

interface User {
    id: string;
    firstName: string;
    lastName: string;
    email: string;
    role: string;
    age: number | null;
}

const AdminDashboard = () => {
    const [users, setUsers] = useState<User[]>([]);
    const [guides, setGuides] = useState<Guide[]>([]);
    const [modalVisible, setModalVisible] = useState(false);
    const [editingUser, setEditingUser] = useState<User | null>(null);
    const [userTests, setUserTests] = useState<{ [userId: string]: Tests[] }>({});

    useEffect(() => {
        const fetchUsers = async () => {
            try {
                const q = query(collection(FIRESTORE_DB, 'users'), where('role', '==', 'user'));
                const usersSnapshot = await getDocs(q);
                const usersList: User[] = usersSnapshot.docs.map((doc) => {
                    const data = doc.data();
                    return {
                        id: doc.id,
                        firstName: data.firstName,
                        lastName: data.lastName,
                        email: data.email,
                        role: data.role,
                        age: data.age || null,
                    };
                });
                setUsers(usersList);
            } catch (error) {
                console.error('Error fetching users:', error);
            }
        };

        const fetchGuides = async () => {
            const collectionNames = ['guides', 'Guides2', 'Guides3', 'Guides4', 'Guides5'];
            let allGuides: Guide[] = [];
            for (const name of collectionNames) {
                const guidesSnapshot = await getDocs(collection(FIRESTORE_DB, name));
                const guidesList: Guide[] = guidesSnapshot.docs.map((doc) => ({
                    ...doc.data(),
                    guideCollection: name,
                } as Guide));
                allGuides = [...allGuides, ...guidesList];
            }
            setGuides(allGuides);
        };

        fetchUsers();
        fetchGuides();
    }, []);

    const fetchTestsForUser = async (user: User) => {
        try {
            const testsSnapshot = await getDocs(collection(FIRESTORE_DB, `users/${user.id}/tests`));
            const testsList: Tests[] = testsSnapshot.docs.map((doc) => doc.data() as Tests);
            setUserTests((prevState) => ({
                ...prevState,
                [user.id]: testsList,
            }));
        } catch (error) {
            console.error('Error fetching tests:', error);
        }
    };

    const evaluateTestsForAllGuides = (
        testValue: number,
        testType: string,
        userAge: number
    ) => {
        return guides
            .filter((guide) => guide.testType === testType)
            .map((guide) => {
                const range = guide.ranges.find(
                    (r) =>
                        (r.ageMin ?? 0) <= userAge &&
                        userAge <= (r.ageMax ?? Infinity)
                );

                if (!range) {
                    return {
                        guide: guide.guideCollection,
                        status: "No Range Found",
                        color: "grey",
                    };
                }

                if (range.min !== null && testValue < range.min) {
                    return { guide: guide.guideCollection, status: "Low", color: "red" };
                }
                if (range.max !== null && testValue > range.max) {
                    return { guide: guide.guideCollection, status: "High", color: "orange" };
                }

                return { guide: guide.guideCollection, status: "Normal", color: "green" };
            });
    };

    const renderAnalysis = () => {
        if (!editingUser) return null;

        const tests = userTests[editingUser.id];
        if (!tests || tests.length === 0) {
            return <Text>No tests available for this user.</Text>;
        }

        return (
            <ScrollView>
                {tests.map((test, index) => (
                    <View key={index} style={styles.testContainer}>
                        <Text style={styles.timestamp}>
                            Timestamp: {new Date(test.timestamp?.seconds * 1000).toLocaleString()}
                        </Text>
                        {Object.entries(test)
                            .filter(([key]) => key !== "timestamp")
                            .map(([testType, value]) => {
                                if (value === null || typeof value !== "number") return null;

                                const evaluations = evaluateTestsForAllGuides(
                                    value,
                                    testType,
                                    editingUser.age ?? 0
                                );

                                return (
                                    <View key={testType} style={styles.testGroup}>
                                        <Text style={styles.testType}>{testType}</Text>
                                        {evaluations.map((evaluation, evalIndex) => (
                                            <View key={evalIndex} style={styles.resultRow}>
                                                <Text style={styles.guideName}>
                                                    {evaluation.guide}:
                                                </Text>
                                                <Text
                                                    style={{
                                                        color: evaluation.color,
                                                        fontWeight: "bold",
                                                    }}
                                                >
                                                    {evaluation.status}
                                                </Text>
                                            </View>
                                        ))}
                                    </View>
                                );
                            })}
                    </View>
                ))}
            </ScrollView>
        );
    };

    const handleEdit = (user: User) => {
        setEditingUser(user);
        fetchTestsForUser(user);
        setModalVisible(true);
    };

    return (
        <View style={styles.container}>
            <FlatList
                data={users}
                keyExtractor={(item) => item.id}
                renderItem={({ item }) => (
                    <View style={styles.userCard}>
                        <Text style={styles.userInfo}>
                            <Text style={styles.label}>Name:</Text> {item.firstName} {item.lastName}
                        </Text>
                        <Text style={styles.userInfo}>
                            <Text style={styles.label}>Email:</Text> {item.email}
                        </Text>
                        <Text style={styles.userInfo}>
                            <Text style={styles.label}>Age:</Text> {item.age ?? "N/A"}
                        </Text>
                        <Button title="Edit Tests" onPress={() => handleEdit(item)} />
                    </View>
                )}
            />
            <Modal visible={modalVisible} animationType="slide" onRequestClose={() => setModalVisible(false)}>
                <View style={styles.modalContainer}>
                    <Button title="Close" onPress={() => setModalVisible(false)} color="red" />
                    {renderAnalysis()}
                </View>
            </Modal>
        </View>
    );
};

const styles = StyleSheet.create({
    container: {
        flex: 1,
        padding: 10,
        backgroundColor: '#ffffff',
    },
    userCard: {
        padding: 15,
        marginVertical: 8,
        backgroundColor: '#f1f1f1',
        borderRadius: 8,
    },
    userInfo: {
        fontSize: 16,
        marginBottom: 5,
    },
    label: {
        fontWeight: 'bold',
    },
    modalContainer: {
        flex: 1,
        padding: 10,
        backgroundColor: '#ffffff',
    },
    testContainer: {
        marginBottom: 20,
    },
    timestamp: {
        marginBottom: 10,
        fontWeight: 'bold',
    },
    testGroup: {
        marginBottom: 15,
    },
    testType: {
        fontWeight: 'bold',
        fontSize: 16,
    },
    resultRow: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        marginBottom: 5,
    },
    guideName: {
        fontWeight: 'bold',
    },
});

export default AdminDashboard;
